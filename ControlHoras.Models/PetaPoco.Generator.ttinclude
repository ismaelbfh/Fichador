<#
if (string.IsNullOrEmpty(Namespace)) Namespace=ConnectionStringName;
if (string.IsNullOrEmpty(RepoName) && !string.IsNullOrEmpty(ConnectionStringName)) RepoName=ConnectionStringName + "DB";
if (string.IsNullOrEmpty(Namespace)) Namespace="PetaPoco";
if (string.IsNullOrEmpty(RepoName)) RepoName="PetaPocoDB";
#>
using System;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using Alc.Data;
using Alc.Model;

namespace <#=Namespace #>
{
<# if (GenerateCommon) { #>
	public partial class <#=RepoName#> : Database
	{
		public <#=RepoName#>() 
			: base("<#=ConnectionStringName#>")
		{
			CommonConstruct();
		}

		public <#=RepoName#>(string connectionStringName) 
			: base(connectionStringName)
		{
			CommonConstruct();
		}
		
		partial void CommonConstruct();
		
		public interface IFactory
		{
			<#=RepoName#> GetInstance();
		}
		
		public static IFactory Factory { get; set; }
        public static <#=RepoName#> GetInstance()
        {
			if (_instance!=null)
				return _instance;
				
			if (Factory!=null)
				return Factory.GetInstance();
			else
				return new <#=RepoName#>();
        }

		[ThreadStatic] static <#=RepoName#> _instance;
		
		public override void OnBeginTransaction()
		{
			if (_instance==null)
				_instance=this;
		}
		
		public override void OnEndTransaction()
		{
			if (_instance==this)
				_instance=null;
		}
        
<# if (GenerateOperations) { #>
		public class Record<T> where T:new()
		{
			public static <#=RepoName#> repo { get { return <#=RepoName#>.GetInstance(); } }
			public bool IsNew() { return repo.IsNew(this); }
			public object Insert() { return repo.Insert(this); }
<# if (!TrackModifiedColumns) { #>
			public void Save() { repo.Save(this); }
			public int Update() { return repo.Update(this); }
<# } #>
			public int Update(IEnumerable<string> columns) { return repo.Update(this, columns); }
			public static int Update(string sql, params object[] args) { return repo.Update<T>(sql, args); }
			public static int Update(Sql sql) { return repo.Update<T>(sql); }
			public int Delete() { return repo.Delete(this); }
			public static int Delete(string sql, params object[] args) { return repo.Delete<T>(sql, args); }
			public static int Delete(Sql sql) { return repo.Delete<T>(sql); }
			public static int Delete(object primaryKey) { return repo.Delete<T>(primaryKey); }
			public static bool Exists(object primaryKey) { return repo.Exists<T>(primaryKey); }
			public static T SingleOrDefault(object primaryKey) { return repo.SingleOrDefault<T>(primaryKey); }
			public static T SingleOrDefault(string sql, params object[] args) { return repo.SingleOrDefault<T>(sql, args); }
			public static T SingleOrDefault(Sql sql) { return repo.SingleOrDefault<T>(sql); }
			public static T FirstOrDefault(string sql, params object[] args) { return repo.FirstOrDefault<T>(sql, args); }
			public static T FirstOrDefault(Sql sql) { return repo.FirstOrDefault<T>(sql); }
			public static T Single(object primaryKey) { return repo.Single<T>(primaryKey); }
			public static T Single(string sql, params object[] args) { return repo.Single<T>(sql, args); }
			public static T Single(Sql sql) { return repo.Single<T>(sql); }
			public static T First(string sql, params object[] args) { return repo.First<T>(sql, args); }
			public static T First(Sql sql) { return repo.First<T>(sql); }
			public static List<T> Fetch(string sql, params object[] args) { return repo.Fetch<T>(sql, args); }
			public static List<T> Fetch(Sql sql) { return repo.Fetch<T>(sql); }
			public static List<T> Fetch(long page, long itemsPerPage, string sql, params object[] args) { return repo.Fetch<T>(page, itemsPerPage, sql, args); }
			public static List<T> Fetch(long page, long itemsPerPage, Sql sql) { return repo.Fetch<T>(page, itemsPerPage, sql); }
			public static List<T> SkipTake(long skip, long take, string sql, params object[] args) { return repo.SkipTake<T>(skip, take, sql, args); }
			public static List<T> SkipTake(long skip, long take, Sql sql) { return repo.SkipTake<T>(skip, take, sql); }
			public static Page<T> Page(long page, long itemsPerPage, string sql, params object[] args) { return repo.Page<T>(page, itemsPerPage, sql, args); }
			public static Page<T> Page(long page, long itemsPerPage, Sql sql) { return repo.Page<T>(page, itemsPerPage, sql); }
			public static IEnumerable<T> Query(string sql, params object[] args) { return repo.Query<T>(sql, args); }
			public static IEnumerable<T> Query(Sql sql) { return repo.Query<T>(sql); }
<# if (TrackModifiedColumns) { #>			
			private Dictionary<string,bool> ModifiedColumns;
			private void OnLoaded()
			{
				ModifiedColumns = new Dictionary<string,bool>();
			}
			protected void MarkColumnModified(string column_name)
			{
				if (ModifiedColumns!=null)
					ModifiedColumns[column_name]=true;
			}
			public int Update() 
			{ 
				if (ModifiedColumns==null)
					return repo.Update(this); 

				int retv = repo.Update(this, ModifiedColumns.Keys);
				ModifiedColumns.Clear();
				return retv;
			}
			public void Save() 
			{ 
				if (repo.IsNew(this))
					repo.Insert(this);
				else
					Update();
			}
<# } #>
		}
<# } #>
	}
<# } #>	

<# if (GeneratePocos) { #>
<#
foreach(Table tbl in from t in tables where !t.Ignore && !t.Name.StartsWith("sys") && !t.Name.StartsWith("MS") select t)
{
#>
    
	[TableName("<#=tbl.Name#>")]
<# if (tbl.PK!=null && tbl.PK.IsAutoIncrement) { #>
<# if (tbl.SequenceName==null) { #>
	[PrimaryKey("<#=tbl.PK.Name#>")]
<# } else { #>
	[PrimaryKey("<#=tbl.PK.Name#>", sequenceName="<#=tbl.SequenceName#>")]
<# } #>
<# } #>
<# if (tbl.PK!=null && !tbl.PK.IsAutoIncrement) { #>
	[PrimaryKey("<#=tbl.PK.Name#>", autoIncrement=false)]
<# } #>
	[ExplicitColumns]
    public partial class <#=tbl.ClassName#> <# if (GenerateOperations) { #>: Entity <# } #><# if (tbl.PK!=null && tbl.PK.Name=="Id") { #>, IHasId<<#=tbl.PK.PropertyType#>>, IDataErrorInfo <# } #>
    {
		[ResultColumn]
	    string IDataErrorInfo.Error
	    {
	        get { return string.Empty; }
	    }

<#
foreach(Column col in from c in tbl.Columns where !c.Ignore select c)
{
		// Column bindings
#>

<# if (TrackModifiedColumns) { #>
<# if (col.ResultColumn) { #>
	[ResultColumn] 
<# } else { #>
<# if (col.Name!=col.PropertyName) { #>
        [Column("<#=col.Name#>")] 
<# } else { #>
        [Column] 
<# } #>
<# } #>
<# if (col.MaxLength != null && col.MaxLength.Value > 0) { #>
	[StringLength(<#=col.MaxLength.Value.ToString()#>)]
<# } #>
		public <#=col.PropertyType #><#=CheckNullable(col)#> <#=col.PropertyName #> 
		{ 
			get
			{
				return _<#=col.PropertyName #>;
			}
			set
			{
				if(value != _<#=col.PropertyName #>)
				{
					if(OnPropertyChanging("<#=col.PropertyName #>", _<#=col.PropertyName #>, value))
					{
						return;
					}
					<# if (col.PropertyType == "string" && col.MaxLength != null && col.MaxLength.Value > 0) { #>
						_<#=col.PropertyName #> = value.Limit(<#=col.MaxLength.Value.ToString()#>);
					<# } else { #>
					<# if (col.PropertyType == "DateTime" && !col.IsNullable) { #>
						if(value == DateTime.MinValue)
						{
							_<#=col.PropertyName #> = new DateTime(1753,1,1,0,0,0,0).ToUniversalTime();
						}
						else
						{
							_<#=col.PropertyName #> = value;
						}
					<# } else { #>
						_<#=col.PropertyName #> = value;
					<# } #>
					<# } #>
					OnPropertyChanged();
				}				
			}
		}
		<# if (System.String.IsNullOrEmpty(col.DefaultSetting) && col.PropertyType == "DateTime" && !col.IsNullable) { #>
			<#=col.PropertyType #><#=CheckNullable(col)#> _<#=col.PropertyName#> = new DateTime(1753,1,1,0,0,0,0).ToUniversalTime()
		<# } else { #>
			<#=col.PropertyType #><#=CheckNullable(col)#> _<#=col.PropertyName #> 
		<# } #>	
		<# if (!System.String.IsNullOrEmpty(col.DefaultSetting) && col.PropertyType != "Guid") 
		   {		   
				if (col.PropertyType == "string")
				{			
						#> = <#=col.DefaultSetting.Replace(@"N'", @"'").Replace(@"('", @"(@'").Replace((char)39, (char)34)#> <# 
				}
				else
				{
					if (col.PropertyType == "bool")
					{
							#> = <#=col.DefaultSetting.Replace("((0))", "false").Replace("((1))", "true")#> <# 
					}
					else if (col.PropertyType == "DateTime")
					{
						if(col.DefaultSetting.ToLower() == "(getdate())")
						{
							#> = <#=col.DefaultSetting.ToLower().Replace("(getdate())", "DateTime.Now")#> <# 
						}
						else if(col.DefaultSetting.ToLower() == "(getutcdate())")
						{
							#> = <#=col.DefaultSetting.ToLower().Replace("(getutcdate())", "DateTime.UtcNow")#> <# 
						}
					}
					else
					{
						#> = (<#=col.PropertyType#><# if(col.IsNullable) { #>?<# } #>) <#=col.DefaultSetting.Replace((char)39, (char)34).ToLowerInvariant()#> <#
					}
				}
		   }
		#>;
			

<# } else { #>
<# if (col.Name!=col.PropertyName) { #>
		[Column("<#=col.Name#>")] public <#=col.PropertyType #><#=CheckNullable(col)#> <#=col.PropertyName #> { get; set; }
<# } else { #>
		[Column] public <#=col.PropertyType #><#=CheckNullable(col)#> <#=col.PropertyName #> { get; set; }
<# } #>
<# } #>
<# } #>
	}
<# } #>
<# } #>
}
